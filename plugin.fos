#ifndef __PLUGIN__
#define __PLUGIN__

// version checks
// must be done before plugin_h preprocessing

#ifndef __VERSION
 #error Plugin module requires SDK r465 or newer
#endif
#ifdef __VERSION
 #if __VERSION < 465
  #error Plugin module requires SDK r465 or newer
 #endif
#endif

#include "plugin_h.fos"

shared class CPluginManager : IPluginManager
{
    array<Plugin@> Plugins;

    private bool verify = false;

    // used to cache plugins before verification
    private array<Plugin@> cache;
    private array<bool>    setup;

    // internal

    private uint Count( bool enabled )
    {
	uint result = 0;

	for( uint p=0, pLen=this.Plugins.length(); p<pLen; p++ )
	{
	    if( this.Plugins[p].Enabled == enabled )
		result++;
	}

	return( result );
    }

    // find plugin in specific array
    private Plugin@ Get( string& name, array<Plugin@>& arr )
    {
	for( uint p=0, pLen=arr.length(); p<pLen; p++ )
	{
	    Plugin@ plugin = arr[p];

	    if( plugin.Name == name )
		return( plugin );
	}

	return( null );
    }

    // find plugins and sort them by priority
    private uint Get( array<Plugin@>& plugins, string& priorityName, bool enabled )
    {
	PluginPriority priority;
	if( priority.GetId( priorityName ) < 0 )
	    return( 0 );

	// Reinventing the wheel
	array<Plugin@> copyPlugins = this.Plugins;
	array<Plugin@> sortedPlugins;
	uint result = 0;
	while( copyPlugins.length() > 0 )
	{
	    Plugin@ plugin = copyPlugins.first();
	    copyPlugins.removeFirst();

	    if( plugin.Enabled != enabled )
		continue;

	    result++;
	    bool added = false;
	    for( uint p=0, pLen=sortedPlugins.length(); p<pLen; p++ )
	    {
		if( plugin.priority[priorityName] > sortedPlugins[p].priority[priorityName] )
		{
		    sortedPlugins.insertAt( p, plugin );
		    added = true;
		    break;
		}
	    }

	    if( !added )
		sortedPlugins.insertLast( plugin );
	}

	for( uint p=0; p<result; p++ )
	{
	    plugins.insertLast( sortedPlugins[p] );
	}

	return( result );
    }

    bool Enabled( string& name )
    {
	for( uint p=0, pLen=this.Plugins.length(); p<pLen; p++ )
	{
	    Plugin@ plugin = Plugins[p];
	    if( plugin.Name == name && plugin.Enabled )
		return( true );
	}

	return( false );
    }

    // public

    uint get_Count()
    {
	return( this.Plugins.length() );
    }

    uint get_CountEnabled()
    {
	return( this.Count( true ));
    }

    uint get_CountDisabled()
    {
	return( this.Count( false ));
    }

    Plugin@ Get( string& name )
    {
	return( this.Get( name, this.Plugins ));
    }

    uint Get( array<Plugin@>& plugins )
    {
	uint result = 0;

	for( uint p=0, pLen=this.Plugins.length(); p<pLen; p++ )
	{
	    plugins.insertLast( this.Plugins[p] );
	    result++;
	}

	return( result );
    }


    uint GetEnabled( array<Plugin@>& plugins )
    {
	uint result = 0;

	for( uint p=0, pLen=this.Plugins.length(); p<pLen; p++ )
	{
	    Plugin@ plugin = this.Plugins[p];
	    if( plugin.Enabled )
	    {
		plugins.insertLast( plugin );
		result++;
	    }
	}

	return( result );
    }

    uint GetEnabled( array<Plugin@>& plugins, string& priorityName )
    {
	return( this.Get( plugins, priorityName, true ));
    }

    uint GetDisabled( array<Plugin@>& plugins )
    {
	uint result = 0;

	for( uint p=0, pLen=this.Plugins.length(); p<pLen; p++ )
	{
	    Plugin@ plugin = this.Plugins[p];
	    if( !plugin.Enabled )
	    {
		plugins.insertLast( plugin );
		result++;
	    }
	}

	return( result );
    }

    uint GetDisabled( array<Plugin@>& plugins, string& priorityName )
    {
	return( this.Get( plugins, priorityName, false ));
    }

    void Set( string& name, bool enabled )
    {
	Plugin@ plugin = this.Get( name );
	if( valid(plugin) )
	{
	    if( plugin.Enabled != enabled )
	    {
		plugin.Enabled = enabled;

		if( !this.verify )
		    return;

		if( enabled )
		    plugin.OnEnable();
		else
		    plugin.OnDisable();
	    }
	}
#ifndef __CLIENT
	else
	    Log( "Unknown plugin<"+name+">" );
#endif
    }

    void Event( Plugin& sender, string& event, dictionary@ params )
    {
	string senderName = sender.Name;

	if( senderName.length() == 0 || event.length() == 0 )
		return;

	array<Plugin@> plugins;
	uint pLen = this.GetEnabled( plugins );

	for( uint p=0; p<pLen; p++ )
	{
	    Plugin@ target = Plugins[p];

	    if( target.Name == senderName )
		continue;

	    target.OnEvent( senderName, event, params );
	}
    }

    // meta

    void Names( array<string>& enabled, array<string>& disabled )
    {
	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
	    Plugin@ plugin= Plugins[p];

	    if( plugin.Enabled )
		enabled.insertLast( plugin.Name );
	    else
		disabled.insertLast( plugin.Name );
	}
    }

    uint Order( array<array<string>>& strings )
    {
	PluginPriority priority;

	uint len = priority.GetNames().length;

	for( uint c=0; c<len; c++ )
	{
	    string@ current = priority.GetName( c );
	    if( !valid(current) )
	    {
		Log( "ERROR: invalid priorityId<"+c+">" );
		return( c );
	    }

	    array<string> pResult = { current };

	    array<Plugin@> plugins;
	    uint pLen = this.GetEnabled( plugins, current );

	    for( uint p=0; p<pLen; p++ )
	    {
		Plugin@ plugin = plugins[p];
		pResult.insertLast( plugin.Name+":"+plugin.priority[current] );
	    }

	    strings.insertLast( pResult );
	}

	return( len );
    }

    // initialization

    bool Register( Plugin@ plugin, bool enabled )
    {
	if( this.verify )
	    Log( "Attempt to register plugin after verification" );
	if( !valid(plugin) )
	    Log( "Attempt to register invalid plugin" );
	else if( plugin.Name.length() == 0 )
	    Log( "Attempt to register plugin without name" );
	else if( valid(this.Get(plugin.Name,this.cache)) )
	    Log( "Plugin with name<"+plugin.Name+"> already registered" );
	else
	{
	    this.cache.insertLast( plugin );
	    this.setup.insertLast( enabled );

	    Log( "Registered plugin: "+plugin.Name+(plugin.Version > 0 ? ", v"+plugin.Version : "") );

	    return( true );
	}

	return( false );
    }

    void Verify()
    {
	if( this.cache.length() != this.setup.length() )
	{
	    Log( "ERROR: Invalid plugins cache length" );
	    return;
	}

	for( uint p=0, pLen=this.cache.length(); p<pLen; p++ )
	{
	    Plugin@ plugin = this.cache[p];

	    if( !valid(plugin) )
	    {
		Log( "WARNING: invalid plugin in cache, index<"+p+">" );
		continue;
	    }

	    bool invalid = false;
	    array<string> required, optional;
	    array<uint> rLen = plugin.Requirements( required, optional );

	    // display all errors and warnings for each plugin

	    for( uint r=0; r<rLen[0]; r++ )
	    {
		string rName = required[r];
		if( !valid(Get(rName,this.cache)) )
		{
		    Log( "ERROR: Plugin<"+plugin.Name+"> : missing required plugin<"+rName+">" );
		    invalid = true;
		}
	    }

	    for( uint r=0; r<rLen[1]; r++ )
	    {
		string pName = optional[r];
		if( !valid(this.Get(pName,this.cache)) )
		{
		    Log( "WARNING: Plugin<"+plugin.Name+"> missing optional plugin<"+pName+">" );
		}
	    }

	    if( invalid )
	    {
		Log( "ERROR: Plugin<"+plugin.Name+"> : cannot initialize" );
		continue;
	    }

	    // this is only initial config
	    plugin.Enabled = this.setup[p];

	    this.Plugins.insertLast( plugin );
	}

	this.cache.resize(0);
	this.setup.resize(0);

	this.verify = true;
    }

    //
    //
    //

    #define RUN#( name, func ) \
	array<Plugin@> plugins;                       \
	uint pLen = this.GetEnabled( plugins, name ); \
	for( uint p=0; p<pLen; p++ )                  \
	{                                             \
	    plugins[p]. ## func ## ();                \
	}

    #define RUN1#( name, func, arg1 ) \
	array<Plugin@> plugins;                       \
	uint pLen = this.GetEnabled( plugins, name ); \
	for( uint p=0; p<pLen; p++ )                  \
	{                                             \
	    plugins[p]. ## func ## ( arg1 );          \
	}

    #define RUN2#( name, func, arg1, arg2 ) \
	array<Plugin@> plugins;                       \
	uint pLen = this.GetEnabled( plugins, name ); \
	for( uint p=0; p<pLen; p++ )                  \
	{                                             \
	    plugins[p]. ## func ## ( arg1, arg2 );    \
	}

    #define RUN3#( name, func, arg1, arg2, arg3 ) \
	array<Plugin@> plugins;                          \
	uint pLen = this.GetEnabled( plugins, name );    \
	for( uint p=0; p<pLen; p++ )                     \
	{                                                \
	    plugins[p]. ## func ## ( arg1, arg2, arg3 ); \
	}

    #define RUN4#( name, func, arg1, arg2, arg3, arg4 ) \
	array<Plugin@> plugins;                                \
	uint pLen = this.GetEnabled( plugins, name );          \
	for( uint p=0; p<pLen; p++ )                           \
	{                                                      \
	    plugins[p]. ## func ## ( arg1, arg2, arg3, arg4 ); \
	}

    #define RUN5#( name, func, arg1, arg2, arg3, arg4, arg5 ) \
	array<Plugin@> plugins;                                      \
	uint pLen = this.GetEnabled( plugins, name );                \
	for( uint p=0; p<pLen; p++ )                                 \
	{                                                            \
	    plugins[p]. ## func ## ( arg1, arg2, arg3, arg4, arg5 ); \
	}

    #define RUN8#( name, func, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 ) \
	array<Plugin@> plugins;                                                        \
	uint pLen = this.GetEnabled( plugins, name );                                  \
	for( uint p=0; p<pLen; p++ )                                                   \
	{                                                                              \
	    plugins[p]. ## func ## ( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 ); \
	}

    #define RUN10#( name, func, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 ) \
	array<Plugin@> plugins;                                                                     \
	uint pLen = this.GetEnabled( plugins, name );                                               \
	for( uint p=0; p<pLen; p++ )                                                                \
	{                                                                                           \
	    plugins[p]. ## func ## ( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 ); \
	}

    #define RUN_BOOL#( name, func, stop, def ) \
	array<Plugin@> plugins;                       \
	uint pLen = this.GetEnabled( plugins, name ); \
	for( uint p=0; p<pLen; p++ )                  \
	{                                             \
	    if( plugins[p]. ## func ## () == stop )   \
		return( stop );                       \
	}                                             \
	return( def );

    #define RUN_BOOL2#( name, func, stop, def, arg1, arg2 ) \
	array<Plugin@> plugins; \                               \
	uint pLen = this.GetEnabled( plugins, name );           \
	for( uint p=0; p<pLen; p++ )                            \
	{                                                       \
	    if( plugins[p]. ## func ## ( arg1, arg2 ) == stop ) \
		return( stop );                                 \
	}                                                       \
	return( def );

    #define RUN_BOOL3#( name, func, stop, def, arg1, arg2, arg3 ) \
	array<Plugin@> plugins;                                       \
	uint pLen = this.GetEnabled( plugins, name );                 \
	for( uint p=0; p<pLen; p++ )                                  \
	{                                                             \
	    if( plugins[p]. ## func ## ( arg1, arg2, arg3 ) == stop ) \
		return( stop );                                       \
	}                                                             \
	return( def );

    #define RUN_BOOL4#( name, func, stop, def, arg1, arg2, arg3, arg4 ) \
	array<Plugin@> plugins;                                             \
	uint pLen = this.GetEnabled( plugins, name );                       \
	for( uint p=0; p<pLen; p++ )                                        \
	{                                                                   \
	    if( plugins[p]. ## func ## ( arg1, arg2, arg3, arg4 ) == stop ) \
		return( stop );                                             \
	}                                                                   \
	return( def );

    #define RUN_BOOL5#( name, func, stop, def, arg1, arg2, arg3, arg4, arg5 ) \
	array<Plugin@> plugins;                                                   \
	uint pLen = this.GetEnabled( plugins, name );                             \
	for( uint p=0; p<pLen; p++ )                                              \
	{                                                                         \
	    if( plugins[p]. ## func ## ( arg1, arg2, arg3, arg4, arg5 ) == stop ) \
		return( stop );                                                   \
	}                                                                         \
	return( def );

    #define RUN_BOOL6#( name, func, stop, def, arg1, arg2, arg3, arg4, arg5, arg6 ) \
	array<Plugin@> plugins;                                                         \
	uint pLen = this.GetEnabled( plugins, name );                                   \
	for( uint p=0; p<pLen; p++ )                                                    \
	{                                                                               \
	    if( plugins[p]. ## func ## ( arg1, arg2, arg3, arg4, arg5, arg6 ) == stop ) \
		return( stop );                                                         \
	}                                                                               \
	return( def );

    #define RUN_BOOL7#( name, func, stop, def, arg1, arg2, arg3, arg4, arg5, arg6, arg7 ) \
	array<Plugin@> plugins;                                                              \
	uint pLen = this.GetEnabled( plugins, name );                                        \
	for( uint p=0; p<pLen; p++ )                                                         \
	{                                                                                    \
	    if( plugins[p]. ## func ## ( arg1, arg2 arg3, arg4, arg5, arg6, arg7 ) == stop ) \
		return( stop );                                                              \
	}                                                                                    \
	return( def );

    #define RUN_TRUE2#( name, func, arg1, arg2 ) \
	RUN_BOOL2( name, func, true, false, arg1, arg2 );

    #define RUN_TRUE5#( name, func, arg1, arg2, arg3, arg4, arg5 ) \
	RUN_BOOL5( name, func, true, false, arg1, arg2, arg3, arg4, arg5 );

    #define RUN_TRUE6#( name, func, arg1, arg2, arg3, arg4, arg5, arg6 ) \
	RUN_BOOL6( name, func, true, false, arg1, arg2, arg3, arg4, arg5, arg6 );

    #define RUN_TRUE7#( name, func, arg1, arg2, arg3, arg4, arg5, arg6 ) \
	RUN_BOOL7( name, func, true, false, arg1, arg2, arg3, arg4, arg5, arg6, arg7 );

    #define RUN_FALSE#( name, func ) \
	RUN_BOOL( name, func, false, true );

    #define RUN_FALSE3#( name, func, arg1, arg2, arg3 ) \
	RUN_BOOL3( name, func, false, true, arg1, arg2, arg3 );

    #define RUN_FALSE4#( name, func, arg1, arg2, arg3, arg4 ) \
	RUN_BOOL4( name, func, false, true, arg1, arg2, arg3, arg4 );

    #define RUN_FALSE5#( name, func, arg1, arg2, arg3, arg4, arg5 ) \
	RUN_BOOL5( name, func, false, true, arg1, arg2, arg3, arg4, arg5 );

    #define RUN_FALSE6#( name, func, arg1, arg2, arg3, arg4, arg5, arg6 ) \
	RUN_BOOL6( name, func, false, true, arg1, arg2, arg3, arg4, arg5, arg6 );

    void finish()
    {
	RUN( "finish", finish );
    }

    void loop()
    {
	RUN( "loop", loop );
    }

#ifndef __MAPPER // client, server

    bool critter_check_move_item( CritterMutual& critter, ItemMutual& item, uint8 toSlot, ItemMutual@ itemSwap )
    {
	RUN_FALSE4( "critter_check_move_item", critter_check_move_item, critter, item, toSlot, itemSwap );
    }

    void get_attack_distantion( uint& distantion, CritterMutual& critter, ItemMutual& item, uint8 mode )
    {
	RUN4( "get_attack_distantion", get_attack_distantion, distantion, critter, item, mode );
    }

    void get_use_ap_cost( uint& cost, CritterMutual& critter, ItemMutual& item, uint8 mode )
    {
	RUN4( "get_use_ap_cost", get_use_ap_cost, cost, critter, item, mode );
    }

    void item_cost( uint& cost, ItemMutual& item, CritterMutual& critter, CritterMutual& npc, bool sell )
    {
	RUN5( "item_cost", item_cost, cost, item, critter, npc, sell );
    }

    bool start()
    {
	RUN_FALSE( "start", start );
    }

#endif // !__MAPPER

#ifndef __SERVER

    string@ critter_animation( int animType, uint crType, uint anim1, uint anim2, uint& pass, uint& flags, int& ox, int& oy )
    {
	array<Plugin@> plugins;
	uint pLen = this.GetEnabled( plugins, "critter_animation" );
	for( uint p=0; p<pLen; p++ )
	{
	    string@ result = plugins[p].critter_animation( animType, crType, anim1, anim2, pass, flags, ox, oy );
	    if( valid(result) )
		return( result );
	}

	return( null );
    }

    bool critter_animation_fallout( uint crType, uint& anim1, uint& anim2, uint& anim1ex, uint& anim2ex, uint& flags )
    {
	RUN_TRUE6( "critter_animation_fallout", critter_animation_fallout, crType, anim1, anim2, anim1ex, anim2ex, flags );
    }

    bool critter_animation_substitute( int animType, uint crTypeBase, uint anim1base, uint anim2base, uint& crType, uint& anim1, uint& anim2 )
    {
	RUN_TRUE7( "critter_animation_substitute", critter_animation_substitute, animType, crTypeBase, anim1base, anim2base, crType, anim1, anim2 );
    }

    void input_lost()
    {
	RUN( "input_lost", input_lost );
    }

    void key_down( uint8 key, string@ text )
    {
	RUN2( "key_down", key_down, key, text );
    }

    void key_up( uint8 key )
    {
	RUN1( "key_up", key_up, key );
    }

    void mouse_down( int button )
    {
	RUN1( "mouse_down", mouse_down, button );
    }

    void mouse_move()
    {
	RUN( "mouse_move", mouse_move );
    }

    void mouse_up( int button )
    {
	RUN1( "mouse_up", mouse_up, button );
    }

    void render_iface( uint layer )
    {
	RUN1( "render_iface", render_iface, layer );
    }

    void render_map()
    {
	RUN( "render_map", render_map );
    }

#endif // !__SERVER

#ifdef __CLIENT
    void animation2d_process( bool animateStay, CritterCl& critter, uint anim1, uint anim2, ItemCl@ item )
    {
	RUN5( "animation2d_process", animation2d_process, animateStay, critter, anim1, anim2, item );
    }

    void animation3d_process( bool animateStay, CritterCl& critter, uint anim1, uint anim2, ItemCl@ item )
    {
	RUN5( "animation3d_process", animation3d_process, animateStay, critter, anim1, anim2, item );
    }

    bool check_interface_hit( int x, int y )
    {
	RUN_TRUE2( "check_interface_hit", check_interface_hit, x, y );
    }

    bool check_perk( CritterCl& critter, uint perk )
    {
	RUN_TRUE2( "check_perk", check_perk, critter, perk );
    }

    void combat_result( array<uint>& data )
    {
	RUN1( "combat_result", combat_result, data );
    }

    void critter_action( bool localCall, CritterCl& critter, int action, int actionExt, Item@ item )
    {
	RUN6( "critter_action", critter_action, localCall, critter, action, actionExt, item );
    }

    void critter_description( string& description, CritterCl& critter, int lookType )
    {
	RUN3( "critter_description", critter_description, description, critter, lookType );
    }

    void critter_in( CritterCl& critter )
    {
	RUN1( "critter_in", critter_in, critter );
    }

    void critter_out( CritterCl& critter )
    {
	RUN1( "critter_out", critter_out, critter );
    }

    void filename_logfile( string& filename )
    {
	RUN1( "filename_logfile", filename_logfile, filename );
    }

    void filename_screenshot( string& filename )
    {
	RUN1( "filename_screenshot", filename_screenshot, filename );
    }

    void generic_description( string& description, int descType, int& offsX, int& offsY )
    {
	RUN4( "generic_description", generic_description, descType, offsX, offsY );
    }

    void get_active_screens( array<int>& screens )
    {
	RUN1( "get_active_screens", get_active_screens, screens );
    }

    bool get_cont_item( uint& itemId, bool& isEnemy )
    {
	RUN_TRUE2( "get_cont_item", get_cont_item, itemId, isEnemy );
    }

    bool get_elevator( uint type, array<uint>& data )
    {
	RUN_TRUE2( "get_elevator", get_elevator, type, data );
    }

    void hit_aim( uint8& aim )
    {
	RUN1( "hit_aim", hit_aim, aim );
    }

    bool in_message( string& message, int& sayType, uint& critterId, uint& delay )
    {
	RUN_FALSE4( "in_message", in_message, sayType, critterId, delay );
    }

    void item_description( string& description, ItemCl& item, int lookType )
    {
	RUN3( "item_description", item_description, description, item, lookType );
    }

    void item_inv_changed( ItemCl& itemNow, ItemCl& itemBefore )
    {
	RUN2( "item_inv_changed", item_inv_changed, itemNow, itemBefore );
    }
    void item_inv_in( ItemCl& item )
    {
	RUN1( "item_inv_in", item_inv_in, item );
    }

    void item_inv_out( ItemCl& item )
    {
	RUN1( "item_inv_out", item_inv_out, item );
    }

    void item_map_changed( ItemCl& itemNow, ItemCl& itemBefore )
    {
	RUN2( "item_map_changed", item_map_changed, itemNow, itemBefore );
    }

    void item_map_in( ItemCl& item )
    {
	RUN1( "item_map_in", item_map_in, item );
    }

    void item_map_out( ItemCl& item )
    {
	RUN1( "item_map_out", item_map_out, item );
    }

    void items_collection( int collection, array<ItemCl>& items )
    {
	RUN2( "items_collection", items_collection, collection, items );
    }

    void map_message( string& message, uint16& hexX, uint16& hexY, uint& color, uint& delay )
    {
	RUN5( "map_message", map_message, hexH, hexY, color, delay );
    }

    void message_box( string& message, int type, bool scriptCall )
    {
	RUN3( "message_box", message_box, message, type, scriptCall );
    }

    bool out_message( string& message, int& sayType )
    {
	RUN_FALSE2( "out_message", message, sayType );
    }

    bool player_data_check( array<int>& data )
    {
	RUN_FALSE1( "player_data_check", player_data_check, data );
    }

    void player_data_generate( array<int>& data )
    {
	RUN1( "player_data_generate", player_data_generate, data );
    }

    void screen_change( bool show, int screen, dictionary@ params )
    {
	RUN3( "screen_change", screen_change, show, screen, params );
    }

    void to_hit( int& toHit, CritterCl& chosen, CritterCl& target, ProtoItem& weapon, uint8 weaponMode )
    {
	RUN5( "to_hit", to_hit, toHit, chosen, target, weapon, weaponMode );
    }

#endif // __CLIENT

#ifdef __MAPPER

    bool console_message( string& message )
    {
	RUN_TRUE1( "console_message", console_message, message );
    }

    void map_load( MapperMap& map )
    {
	RUN1( "map_load", map_load, map );
    }

    void map_save( MapperMap& map )
    {
	RUN1( "map_save", map_save, map );
    }

    void start()
    {
	RUN( "start", start );
    }

#endif // __MAPPER

#ifdef __SERVER

    /*
    TODO
    bool check_look( Map& map, Critter& critter, Critter& opponent )
    bool check_trap_look( Map& map, Critter& cr, Item& trap )
    */

    void critter_attack( Critter& critter, Critter& target, ProtoItem& weapon, uint8 weaponMode, ProtoItem@ ammo )
    {
	RUN5( "critter_attack", critter_attack, critter, target, weapon, weaponMode, ammo );
    }

    void critter_attacked( Critter& critter, Critter& attacker )
    {
	RUN2( "critter_attacked", critter_attacked, critter, attacker );
    }

    void critter_dead( Critter& critter, Critter@ killer )
    {
	RUN2( "critter_dead", critter_dead, critter, killer );
    }

    void critter_finish( Critter& critter, bool toDelete )
    {
	RUN2( "critter_finish", critter_finish, critter, toDelete );
    }

    void critter_idle( Critter& critter )
    {
	RUN1( "critter_idle", critter_idle, critter );
    }

    void critter_init( Critter& critter, bool firstTime )
    {
	RUN2( "critter_init", critter_init, critter, firstTime );
    }

    void critter_move_item( Critter& critter, Item& item, uint8 fromSlot )
    {
	RUN3( "critter_move_item", critter_move_item, critter, item, fromSlot );
    }

    void critter_reload_weapon( Critter& critter, Item& weapon, Item@ ammo )
    {
	RUN3( "critter_reload_weapon", critter_reload_weapon, critter, weapon, ammo );
    }

    void critter_respawn( Critter& critter )
    {
	RUN1( "critter_respawn", critter_respawn, critter );
    }

    bool critter_stealing( Critter& critter, Critter& thief, Item& item, uint count )
    {
	RUN_FALSE4( "critter_stealing", critter_stealing, critter, thief, item, count );
    }

    bool critter_use_item( Critter& critter, Item& item, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery, uint param )
    {
	RUN_TRUE6( "critter_use_item", critter_use_item, critter, item, targetCritter, targetItem, targetScenery, param );
    }

    bool critter_use_skill( Critter& critter, int skill, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery )
    {
	RUN_TRUE5( "critter_use_skill", critter_use_skill, critter, skill, targetCritter, targetItem, targetScenery );
    }

    void global_invite( Critter& leader, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir )
    {
	RUN8( "global_invite", global_invite, leader, car, encounterDescriptor, combatMode, mapId, hexX, hexY, dir );
    }

    void global_process( int processType, Critter& critter, Item@ car, float& curX, float& curY, float& toX, float& toY, float& speed, uint& encounterDescriptor, bool& waitForAnswer )
    {
	RUN10( "global_process", global_process, processType, critter, car, curX, curY, toX, toY, speed, encounterDescriptor, waitForAnswer );
    }

    bool items_barter( array<Item@>& saleItems, array<uint>& saleItemsCount, array<Item@>& buyItems, array<uint>& buyItemsCount, Critter& player, Critter& npc )
    {
	RUN_FALSE6( "items_barter", items_barter, saleItems, saleItemsCount, buyItems, buyItemsCount, player, npc );
    }

    void items_crafted( array<Item@>& items, array<uint>& itemsCount, array<Item@>& resources, Critter& critter )
    {
	RUN4( "items_crafted", items_crafted, items, itemsCount, resources, critter );
    }

    void karma_voting( Critter& critterFrom, Critter& critterTo, bool up )
    {
	RUN3( "karma_voting", karma_voting, critterFrom, critterTo, up );
    }

    void map_critter_in( Map& map, Critter& critter )
    {
	RUN2( "map_critter_in", map_critter_in, map, critter );
    }

    void map_critter_out( Map& map, Critter& critter )
    {
	RUN2( "map_critter_out", map_critter_out, map, critter );
    }

    /*
    TODO
    bool npc_plane_begin( Critter& npc, NpcPlane& plane, int reason, Critter@ someCritter, Item@ someItem );
    bool npc_plane_end( Critter& npc, NpcPlane& plane, int reason, Critter@ someCritter, Item@ someItem );
    bool npc_plane_run( Critter& npc, NpcPlane& plane, int reason, uint& r0, uint& r1, uint& r2 );
    */

    bool player_allowcommand( Critter@ critter, string@ adminUser, uint8 command )
    {
	RUN_FALSE3( "player_allowcommand", player_allowcommand, critter, adminUser, command );
    }

    bool player_getaccess( Critter& critter, int access, string& password )
    {
	RUN_FALSE3( "player_getaccess", player_getaccess, critter, access, password );
    }

    void player_levelup( Critter& critter, uint skillIdx, uint skillUp, uint perkIdx )
    {
	RUN4( "player_levelup", player_levelup, critter, skillIdx, skillUp, perkIdx );
    }

    bool player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum, string& lexems )
    {
	RUN_FALSE6( "player_login", player_login, ip, name, id, textMsg, strNum, lexems );
    }

    bool player_registration( uint ip, string& name, uint& textMsg, uint& strNum, string& lexems )
    {
	RUN_FALSE5( "player_registration", player_registration, ip, name, textMsg, strNum, lexems );
    }

    void turn_based_begin( Map& map )
    {
	RUN1( "turn_based_begin", turn_based_begin, map );
    }

    void turn_based_end( Map& map )
    {
	RUN1( "turn_based_end", turn_based_end, map );
    }

    void turn_based_process( Map& map, Critter& critter, bool beginTurn )
    {
	RUN3( "turn_based_process", turn_based_process, map, critter, beginTurn );
    }

    void turn_based_sequence( Map& map, array<Critter@>& critters, Critter@ firstTurnCritter )
    {
	RUN3( "turn_based_sequence", turn_based_sequence, map, critters, firstTurnCritter );
    }

    void world_save()
    {
	RUN( "world_save", world_save );
    }

#endif // __SERVER

};

CPluginManager PluginManager();

// plugin

IPluginManager@ get_Plugins()
{
    return( @PluginManager );
}

#endif // __PLUGIN__ //
