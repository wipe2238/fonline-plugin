#ifndef __PLUGIN__
#define __PLUGIN__

#include "plugin_h.fos"

array<Plugin@> Plugins;

// used to cache plugins before verification
array<Plugin@> PluginsCache;
array<bool>    PluginsCacheSetup;

// plugin

bool RegisterPlugin( Plugin@ plugin )
{
	return( RegisterPlugin( plugin, true ));
}

bool RegisterPlugin( Plugin@ plugin, bool enabled )
{
	if( !valid(plugin) )
		Log( "Attempt to register invalid plugin" );
	else if( plugin.Name.length() == 0 )
		Log( "Attempt to register plugin without name" );
	else if( plugin.Name == "*" )
		Log( "Attempt to register plugin with invalid name<*>" );
	else if( IsPlugin( plugin.Name ))
		Log( "Plugin with name<"+plugin.Name+"> already registered" );
	else
	{
		//Log( "Cached "+(enabled ? "en" : "dis")+"abled plugin: "+plugin.Name );

		PluginsCache.insertLast( plugin );
		PluginsCacheSetup.insertLast( enabled );

		Log( "Registered plugin: "+plugin.Name+(plugin.Version > 0 ? ", v"+plugin.Version : "") );
		return( true );
	}

	return( false );
}

void VerifyPlugins()
{
	if( PluginsCache.length() != PluginsCacheSetup.length() )
	{
		Log( "ERROR: Invalid plugins cache length" );
		return;
	}

	for( uint p=0, pLen=PluginsCache.length(); p<pLen; p++ )
	{
		Plugin@ plugin = PluginsCache[p];

		if( !valid(plugin) )
		{
			Log( "WARNING: invalid plugin in cache, idx<"+p+">" );
			continue;
		}

		bool invalid = false;
		array<string> required, optional;
		array<uint> rLen = plugin.Requirements( required, optional );

		// display all errors and warnings for each plugin

		for( uint r=0; r<rLen[0]; r++ )
		{
			string rName = required[r];
			if( !IsPlugin(rName) )
			{
				Log( "ERROR: Plugin<"+plugin.Name+"> : missing required plugin<"+rName+">" );
				invalid = true;
			}
		}

		for( uint r=0; r<rLen[1]; r++ )
		{
			string pName = optional[r];
			if( !IsPlugin(pName) )
			{
				Log( "WARNING: Plugin<"+plugin.Name+"> missing optional plugin<"+pName+">" );
			}
		}

		if( invalid )
		{
			Log( "ERROR: Plugin<"+plugin.Name+"> : cannot initialize" );
			continue;
		}

		Plugins.insertLast( plugin );
		SetPlugin( plugin.Name, PluginsCacheSetup[p] );
	}

	PluginsCache.resize(0);
	PluginsCacheSetup.resize(0);
}

bool IsPlugin( string& name )
{
	return( valid(GetPlugin(name)) );
}

bool IsPluginEnabled( string& name )
{
	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		Plugin@ plugin = Plugins[p];
		if( plugin.Name == name && plugin.Enabled )
			return( true );
	}

	return( false );
}

Plugin@ GetPlugin( string& name )
{
	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		if( Plugins[p].Name == name )
			return( Plugins[p] );
	}

	return( null );
}

uint GetPlugins( array<Plugin@>& plugins )
{
	uint result = 0;

	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		plugins.insertLast( Plugins[p] );
		result++;
	}

	return( result );
}

uint GetPluginsCount()
{
	return( Plugins.length() );
}

uint GetEnabledPlugins( array<Plugin@>& plugins )
{
	uint result = 0;

	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		Plugin@ plugin = Plugins[p];
		if( plugin.Enabled )
		{
			plugins.insertLast( plugin );
			result++;
		}
	}

	return( result );
}

uint GetEnabledPlugins( array<Plugin@>& plugins, string& priorityName )
{
	PluginPriority priority;

	if( priority.GetId( priorityName ) < 0 )
		return( 0 );

	// Reinventing the wheel
	array<Plugin@> copyPlugins = Plugins;
	array<Plugin@> sortedPlugins;
	uint result = 0;
	while( copyPlugins.length() > 0 )
	{
		Plugin@ plugin = copyPlugins.first();
		copyPlugins.removeFirst();

		if( !plugin.Enabled )
			continue;

		result++;
		bool added = false;
		for( uint p=0, pLen=sortedPlugins.length(); p<pLen; p++ )
		{
			if( plugin.priority[priorityName] > sortedPlugins[p].priority[priorityName] )
			{
				sortedPlugins.insertAt( p, plugin );
				added = true;
				break;
			}
		}

		if( !added )
			sortedPlugins.insertLast( plugin );
	}

	for( uint p=0; p<result; p++ )
	{
		plugins.insertLast( sortedPlugins[p] );
	}

	return( result );
}

uint GetEnabledPluginsCount()
{
	array<Plugin@> plugins;
	return( GetEnabledPlugins( plugins ));
}

uint GetDisabledPlugins( array<Plugin@>& plugins )
{
	uint result = 0;

	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		Plugin@ plugin = Plugins[p];
		if( !plugin.Enabled )
		{
			plugins.insertLast( plugin );
			result++;
		}
	}

	return( result );
}

uint GetDisabledPluginsCount()
{
	array<Plugin@> plugins;
	return( GetDisabledPlugins( plugins ));
}

array<uint> GetPluginsNames( array<string>& enabled, array<string>& disabled )
{
	array<uint> result = { 0, 0 };

	for( uint p=0, pLen=Plugins.length(); p<pLen; p++ )
	{
		Plugin@ plugin= Plugins[p];
		if( plugin.Enabled )
		{
			enabled.insertLast( plugin.Name );
			result[0]++;
		}
		else
		{
			disabled.insertLast( plugin.Name );
			result[1]++;
		}
	}

	return( result );
}

uint GetPluginsOrder( array<array<string>>& strings )
{
	PluginPriority priority;

	uint len = priority.GetNames().length;

	for( uint c=0; c<len; c++ )
	{
		string@ current = priority.GetName( c );
		if( !valid(current) )
		{
			Log( "ERROR: invalid priorityId<"+c+">" );
			return( c );
		}

		array<string> pResult = { current };

		array<Plugin@> plugins;
		uint pLen = GetEnabledPlugins( plugins, current );

		for( uint p=0; p<pLen; p++ )
		{
			Plugin@ plugin = plugins[p];
			pResult.insertLast( plugin.Name+":"+plugin.priority[current] );
		}

		strings.insertLast( pResult );
	}

	return( len );
}

void SetPlugin( string& name, bool enabled )
{
	Plugin@ plugin = GetPlugin( name );
	if( valid(plugin) )
	{
		if( plugin.Enabled != enabled )
		{
			plugin.Enabled = enabled;

			if( enabled )
				plugin.OnEnable();
			else
				plugin.OnDisable();
		}
	}
#ifndef __CLIENT
	else
		Log( "Unknown plugin<"+name+">" );
#endif
}

void RunPluginEvent( Plugin& sender, string& event, dictionary@ params )
{
	if( event.length() == 0 )
		return;

	string senderName = sender.Name;

	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins );

	for( uint p=0; p<pLen; p++ )
	{
		Plugin@ target = Plugins[p];

		if( target.Name == senderName )
			continue;

		Plugins[p].OnEvent( senderName, event, params );
	}
}

// engine funcions

void Plugins_Loop()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "loop" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].loop();
	}
}

#ifndef __SERVER

void Plugins_RenderIface( uint layer )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "render_iface" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].render_iface( layer );
	}
}

void Plugins_RenderMap()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "render_map" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].render_map();
	}
}

bool Plugins_KeyDown( uint8 key, string& keyText )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "key_down" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].key_down( key, keyText ))
			return( true );
	}

	return( false );
}

bool Plugins_KeyUp( uint8 key, string& keyText )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "key_up" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].key_up( key, keyText ))
			return( true );
	}

	return( false );
}

bool Plugins_MouseDown( int click )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "mouse_down" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].mouse_down( click ))
			return( true );
	}

	return( false );
}

bool Plugins_MouseUp( int click )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "mouse_up" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].mouse_up( click ))
			return( true );
	}

	return( false );
}

void Plugins_MouseMove( int x, int y )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "mouse_move" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].mouse_move( x, y );
	}
}

void Plugins_InputLost()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "input_lost" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].input_lost();
	}
}

#endif // !__SERVER

#ifdef __CLIENT

void Plugins_GetActiveScreens( array<int>& result )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "get_active_screens" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].get_active_screens( result );
	}
}

bool Plugins_ScreenChange( bool show, int screen, int p0, int p1, int p2 )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "screen_change" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].screen_change( show, screen, p0, p1, p2 ))
			return( true );
	}

	return( false );
}


void Plugins_CritterIn( CritterCl& critter )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_in" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_in( critter );
	}
}

void Plugins_CritterOut( CritterCl& critter )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_out" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_out( critter );
	}
}

void Plugins_ItemMapIn( ItemCl& item )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_map_in" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].item_map_in( item );
	}
}

void Plugins_ItemMapChanged( ItemCl& newItem, ItemCl& oldItem )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_map_changed" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].item_map_changed( newItem, oldItem );
	}
}

void Plugins_ItemMapOut( ItemCl& item )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_map_out" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].item_map_out( item );
	}
}

void Plugins_ItemInvIn( ItemCl& item )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_inv_in" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].item_inv_in( item );
	}
}

void Plugins_ItemInvOut( ItemCl& item )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_inv_out" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].item_inv_out( item );
	}
}

bool Plugins_MapMessage( string& message, uint16& hexX, uint16& hexY, uint& color, uint& delay )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "map_message" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].map_message( message, hexX, hexY, color, delay ))
			return( false );
	}

	return( true );
}

bool Plugins_InMessage( string& message, int& sayType, uint& critterId, uint& delay )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "in_message" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].in_message( message, sayType, critterId, delay ))
			return( false );
	}

	return( true );
}

bool Plugins_OutMessage( string& message, int& sayType )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "out_message" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].out_message( message, sayType ))
			return( false );
	}

	return( true );
}

void Plugins_CombatResult( array<uint>& data )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "combat_result" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].combat_result( data );
	}
}

string@ Plugins_GenericDescription( int descType, int& offsetX, int& offsetY )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "generic_description" );

	for( uint p=0; p<pLen; p++ )
	{
		string@ result = plugins[p].generic_description( descType, offsetX, offsetY );
		if( valid(result) && result.length() > 0 )
			return( result );
	}

	return( null );
}

string@ Plugins_ItemDescription( ItemCl& item, int lookType )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "item_description" );

	for( uint p=0; p<pLen; p++ )
	{
		string@ result = plugins[p].item_description( item, lookType );
		if( valid(result) && result.length() > 0 )
		return( result );
	}

	return( null );
}

string@ Plugins_CritterDescription( CritterCl& cr, int lookType )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_description" );

	for( uint p=0; p<pLen; p++ )
	{
		string@ result = plugins[p].critter_description( cr, lookType );
		if( valid(result) && result.length() > 0 )
			return( result );
	}

	return( null );
}

void Plugins_CritterAction( bool localCall, CritterCl& critter, int action, int actionExt, ItemCl@ item )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_action" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_action( localCall, critter, action, actionExt, item );
	}
}

#endif // __CLIENT

#ifdef __MAPPER

bool Plugins_ConsoleMessage( string& message )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "console_message" );

	for( uint p=0; p<pLen; p++ )
	{
		if( plugins[p].console_message( message ))
			return( true );
	}

	return( false );
}

#endif // __MAPPER

#ifdef __SERVER

void Plugins_Init()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "init" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].init();
	}
}

bool Plugins_Start()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "start" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].start() )
			return( false );
	}

	return( true );
}

void Plugins_Finish()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "finish" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].finish();
	}
}

void Plugins_CritterInit( Critter& cr, bool firstTime )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_init" );

	for( uint p=0; p<pLen; p++ )
	{
		Log( "critter_init: "+plugins[p].Name );
		plugins[p].critter_init( cr, firstTime );
	}
}

void Plugins_CritterFinish( Critter& cr, bool toDelete )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_finish" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_finish( cr, toDelete );
	}
}

void Plugins_CritterIdle( Critter& cr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_idle" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_idle( cr );
	}
}

void Plugins_CritterAttack( Critter& cr, Critter& target, ProtoItem& weapon, uint8 weaponMode, ProtoItem@ ammo )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_attack" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_attack( cr, target, weapon, weaponMode, ammo );
	}
}

void Plugins_CritterAttacked( Critter& cr, Critter& attacker )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_attacked" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_attacked( cr, attacker );
	}
}

void Plugins_CritterReloadWeapon( Critter& cr, Item& weapon, Item@ ammo )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_reload_weapon" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_reload_weapon( cr, weapon, ammo );
	}
}
void Plugins_CritterDead( Critter& cr, Critter@ killer )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_dead" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_dead( cr, killer );
	}
}

void Plugins_CritterRespawn( Critter& cr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "critter_respawn" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].critter_respawn( cr );
	}
}

void Plugins_MapCritterIn( Map& map, Critter& cr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "map_critter_in" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].map_critter_in( map, cr );
	}
}

void Plugins_MapCritterOut( Map& map, Critter& cr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "map_critter_out" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].map_critter_out( map, cr );
	}
}

void Plugins_ItemsCrafted( array<Item@>& items, array<uint>& itemsCount, array<Item@>& resources, Critter& cr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "items_crafted" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].items_crafted( items, itemsCount, resources, cr );
	}
}

void Plugins_TurnBasedBegin( Map& map )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "turn_based_begin" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].turn_based_begin( map );
	}
}

void Plugins_TurnBasedEnd( Map& map )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "turn_based_end" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].turn_based_end( map );
	}
}

void Plugins_TurnBasedProcess( Map& map, Critter& cr, bool beginTurn )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "turn_based_process" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].turn_based_process( map, cr, beginTurn );
	}
}

void Plugins_TurnBasedSequence( Map& map, array<Critter@>& critters, Critter@ firstTurnCr )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "turn_based_sequence" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].turn_based_sequence( map, critters, firstTurnCr );
	}
}

void Plugins_WorldSave()
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "world_save" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].world_save();
	}
}

bool Plugins_PlayerLogin( uint ip, string& name, uint id, uint& textMsg, uint& strNum )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "player_login" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].player_login( ip, name, id, textMsg, strNum ))
			return( false );
	}

	return( true );
}

void Plugins_PlayerLevelup( Critter& cr, uint skillIdx, uint skillUp, uint perkIdx )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "player_levelup" );

	for( uint p=0; p<pLen; p++ )
	{
		plugins[p].player_levelup( cr, skillIdx, skillUp, perkIdx );
	}
}

bool Plugins_PlayerGetaccess( Critter& cr, int access, string& password )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "player_getaccess" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].player_getaccess( cr, access, password ))
			return( false );
	}

	return( true );
}

bool Plugins_PlayerAllowcommand( Critter@ cr, string@ adminUser, uint8 command )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "player_allowcommand" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].player_allowcommand( cr, adminUser, command ))
			return( false );
	}

	return( true );
}

bool Plugins_PlayerRegistration( uint ip, string& name, uint& textMsg, uint& strNum )
{
	array<Plugin@> plugins;
	uint pLen = GetEnabledPlugins( plugins, "player_registration" );

	for( uint p=0; p<pLen; p++ )
	{
		if( !plugins[p].player_registration( ip, name, textMsg, strNum ))
			return( false );
	}

	return( true );
}

#endif // __SERVER

#endif // __PLUGIN__ //
